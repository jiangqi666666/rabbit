<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       ">


	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />  
        <property name="ignoreResourceNotFound" value="true" />  
        <property name="locations">  
            <list>  
                <!-- rabbitmq配置 -->  
                <value>classpath*:/rabbitmq.properties</value>  
            </list>  
        </property>  
    </bean>  

    <bean id="connectionFactory" class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">  
        <property name="host" value="${rabbitmq.host}" />  
        <property name="port" value="${rabbitmq.port}" />  
        <property name="username" value="${rabbitmq.username}" />  
        <property name="password" value="${rabbitmq.password}" />  
        <property name="virtualHost" value="${rabbitmq.virtualHost}" />
        <!-- 缓存模式   CONNECTION CHANNEL，默认的缓存模式是CHANNEL。
        当缓存模式是 CONNECTION时, 队列的自动声明等等 (参考 the section called “Automatic Declaration of Exchanges, Queues and Bindings”) 将不再支持。

        在框架(如． RabbitTemplate) 中使用的通道将会可靠地返回到缓存中.如果在框架外创建了通道 (如.直接访问connection(s)并调用 createChannel() ),
        你必须可靠地返回它们(通过关闭),也许需要在 finally 块中以防止耗尽通道.
         -->
        <property name="cacheMode" value="CHANNEL"/>

        <!-- 默认通道缓存25,多线程环境中，较小的缓存意味着通道的创建和关闭将以很高的速率运行.加大默认缓存大小可避免这种开销
         如果达到了限制,调用线程将会阻塞，直到某个通道可用或者超时, 在后者的情况中，将抛出 AmqpTimeoutException异常.-->
        <property name="channelCacheSize" value="10"/>

        <!-- channelCheckoutTimeout属性. 当此属性的值大于０时， channelCacheSize会变成连接上创建通道数目的限制. -->
        <property name="channelCheckoutTimeout" value="200"/>

        <!-- connectionLimit 1.5.5 新增，会限制连接的总数目,当达到限制值时，将 channelCheckoutTimeLimit  来等待空闲连接.如果时间超时了，将抛出 AmqpTimeoutException -->
        <property name="connectionLimit" value="50"/>
        <!--<property name="connectionCacheSize" value="50"/>-->

        <!-- rabbitmq-client 包默认为每个连接(５个线程)创建了一个固定的线程池. 当需要使用大量连接时，你应该考虑在 CachingConnectionFactory 定制一个 executor .
        然后，同一个executor会用于所有连接，其线程也是共享的． executor的线程池是没有界限的或按预期使用率来设置(通常, 一个连接至少应该有一个线程）.
        如果在每个连接上创建了多个channels，那么池的大小会影响并发性,因此一个可变的线程池executor应该是最合适的. -->
        <!--<property name="executor" value="20"/>-->

        <!-- 消息确认必须配置在CachingConnectionFactory上 -->
        <!--<property name="publisherConfirms" value="true"/>-->
        <!--<property name="publisherReturns" value="true"/>-->

    </bean>

    <!-- 队列 -->
    <bean id="springQueueA" class="org.springframework.amqp.core.Queue">
        <constructor-arg  name="name" value="${rabbitmq.queue.a}"/>
        <property name="shouldDeclare" value="false"/>
    </bean>
    <bean id="springQueueB" class="org.springframework.amqp.core.Queue">
        <constructor-arg  name="name" value="${rabbitmq.queue.b}"/>
        <property name="shouldDeclare" value="false"/>
    </bean>
    <bean id="springQueueC" class="org.springframework.amqp.core.Queue">
        <constructor-arg  name="name" value="${rabbitmq.queue.c}"/>
        <property name="shouldDeclare" value="false"/>
    </bean>
    <bean id="springQueueD" class="org.springframework.amqp.core.Queue">
        <constructor-arg  name="name" value="${rabbitmq.queue.d}"/>
        <property name="shouldDeclare" value="false"/>
    </bean>

    <!-- exchange -->
    <bean id="exchange" class="org.springframework.amqp.core.TopicExchange">
        <constructor-arg name="name" value="${rabbitmq.exchangeName}"/>
        <constructor-arg name="durable" value="true"/>
        <constructor-arg name="autoDelete" value="false"/>
    </bean>

    <!-- exchange 和 队列绑定  开始 -->
    <bean id="arguments" class="java.util.HashMap"/>
    <!-- 绑定 -->
    <bean id="bindingA" class="org.springframework.amqp.core.Binding">
        <!-- 消息发送到目标 -->
        <constructor-arg name="destination" value="${rabbitmq.queue.a}"/>
        <!-- 消息发送到目标的类型，这里使用队列，也可以是exchange -->
        <constructor-arg name="destinationType" value="QUEUE"/>
        <!-- 使用的队列名称 -->
        <constructor-arg name="exchange" value="${rabbitmq.exchangeName}"/>
        <!-- 绑定的routing key -->
        <constructor-arg name="routingKey" value="${rabbitmq.queue.a.routing}"/>
        <constructor-arg name="arguments" ref="arguments"/>
    </bean>
    <bean id="bindingB" class="org.springframework.amqp.core.Binding">
        <constructor-arg name="destination" value="${rabbitmq.queue.b}"/>
        <constructor-arg name="destinationType" value="QUEUE"/>
        <constructor-arg name="exchange" value="${rabbitmq.exchangeName}"/>
        <constructor-arg name="routingKey" value="${rabbitmq.queue.b.routing}"/>
        <constructor-arg name="arguments" ref="arguments"/>
    </bean>
    <!-- 不能一次绑定多个routing key -->
    <bean id="bindingC" class="org.springframework.amqp.core.Binding">
        <constructor-arg name="destination" value="${rabbitmq.queue.c}"/>
        <constructor-arg name="destinationType" value="QUEUE"/>
        <constructor-arg name="exchange" value="${rabbitmq.exchangeName}"/>
        <constructor-arg name="routingKey" value="${rabbitmq.queue.c.routing}"/>
        <constructor-arg name="arguments" ref="arguments"/>
    </bean>
    <bean id="bindingC_2" class="org.springframework.amqp.core.Binding">
        <constructor-arg name="destination" value="${rabbitmq.queue.c}"/>
        <constructor-arg name="destinationType" value="QUEUE"/>
        <constructor-arg name="exchange" value="${rabbitmq.exchangeName}"/>
        <constructor-arg name="routingKey" value="${rabbitmq.queue.c.routing_2}"/>
        <constructor-arg name="arguments" ref="arguments"/>
    </bean>
    <bean id="bindingD" class="org.springframework.amqp.core.Binding">
        <constructor-arg name="destination" value="${rabbitmq.queue.d}"/>
        <constructor-arg name="destinationType" value="QUEUE"/>
        <constructor-arg name="exchange" value="${rabbitmq.exchangeName}"/>
        <constructor-arg name="routingKey" value="${rabbitmq.queue.d.routing}"/>
        <constructor-arg name="arguments" ref="arguments"/>
    </bean>


    <bean id="sendReturnCallback" class="com.convict.rabbitmq.spring.sync.callback.MsgSendReturnCallback"/>
    <bean id="confirmCallback" class="com.convict.rabbitmq.spring.sync.callback.MsgSendConfirmCallBack"/>
    <!-- 同步访问rabbitmq-->
    <bean id="rabbitTemplate"  class="org.springframework.amqp.rabbit.core.RabbitTemplate">  
        <constructor-arg name="connectionFactory" ref="connectionFactory"/>
        <property name="exchange" value="${rabbitmq.exchangeName}"/>
        <!-- 也可以在发送的时候手动设置routing key -->
        <property name="routingKey" value="${rabbitmq.msg.routing}"/>

        <!-- 消息确认 -->
        <!--<property name="returnCallback" ref="sendReturnCallback"/>-->
        <!--<property name="confirmCallback" ref="confirmCallback"/>-->

        <!-- 使用外部事物 -->
        <property name="channelTransacted" value="true"/>

    </bean>

</beans>

